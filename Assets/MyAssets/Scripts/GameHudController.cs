//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;
namespace TikiBeeGame
{
    public class GameHudController : HudController
	{
		//Hud Icons
		public Texture2D healthHudIcon;
		public Texture2D scoreHudIcon;
		public Texture2D pauseHudIcon;
		public Texture2D resumeHudIcon;
		public Texture2D restartHudIcon;
		public Texture2D shieldHudIcon;
        public Texture2D speedBoostHudIcon;
        public Texture2D burstHudIcon;
        public Texture2D backHudIcon;
        public Texture2D walkHudIcon;
        public Texture2D flyHudIcon;

        //win screen
        public ParticleEmitter fireworkParticleSystem;
        private List<ParticleEmitter> instantiatedFireworkParticleSystem = new List<ParticleEmitter>();

		//cooldown indicators
		private float shieldHudLastPressed =0;
        private float speedBoostLastPressed = 0;
        private float burstLastPressed = 0;


		private bool isPaused = false;

        public GUIStyle endGameLabelStyle;
        public GUIStyle coolDownLabelStyle;
        public GUIStyle tipsLabelStyle;
        public GUIStyle scoreAndHealthStyle;

        public Rect guiGroupRect;

        private PlayerController playerController = null;

		public GameHudController ()
		{

		}

        public void Start(){
            float hudHeight = 110;
            guiGroupRect = new Rect(0, 1080 - hudHeight, 1920, hudHeight);
        }

        void OnGUI() {
            /*
             * handles scaling of ui
             * taken from:
             * http://answers.unity3d.com/questions/169056/bulletproof-way-to-do-resolution-independant-gui-s.html
             */
            float native_width = 1920;
            float native_height = 1080;

            //set up scaling
            float rx = Screen.width / native_width;
            float ry = Screen.height / native_height;
            GUI.matrix = Matrix4x4.TRS(new Vector3(0, 0, 0), Quaternion.identity, new Vector3(rx, ry, 1));
            /////////////////////////////////////////////////////////////////////

            if (PreferencesManager.CURRENT_PLAYER == null) { return; }
            playerController = PreferencesManager.CURRENT_PLAYER.GetComponent<PlayerController>();

            int health = playerController.HEALTH;
            int score = playerController.SCORE;

            float buttonWidth = 120;
            float maxHeight = 110;
            float left = 0;
            float labelWidth = 480;
            float bottom = 0;


            //signify we are clicking gui
            Event e = Event.current;
            if (e.type == EventType.MouseDown && guiGroupRect.Contains(e.mousePosition)) {
                playerController.guiClick = true;
            } else if (e.type == EventType.MouseDown && !guiGroupRect.Contains(e.mousePosition)) {
                playerController.guiClick = false;
            }

			//pause game
			if (Time.timeScale.Equals(1.0f)) {
				isPaused = false;
			} else if (Time.timeScale.Equals(0.0f)) {
				isPaused = true;
            }

            #region end game menu
            if (PreferencesManager.END_GAME) {
                //no longer need this since we removed score requirements
                //if (score > PreferencesManager.CURRENT_SCORE_REQUIREMENT) {
                //    if (GUI.Button(new Rect(75, 175, 140, 40), "Continue", menuButtonStyle)) {
                //        PreferencesManager.END_GAME = false;
                //        LevelController.loadNextLevelWithLevelMap();
                //    }
                //    runEmitter(fireworkParticleSystem);
                //    if (instantiatedFireworkParticleSystem.Count < UnityEngine.Random.Range(0f, 2f)) {
                //        ParticleEmitter pe = Instantiate(fireworkParticleSystem) as ParticleEmitter;
                //        pe.transform.position = new Vector3(UnityEngine.Random.Range(-2f, 2f), UnityEngine.Random.Range(-2f, 2f), 1f);
                //        instantiatedFireworkParticleSystem.Add(pe);
                //    }
                //    Invoke("moveFireworks", 2);
                //    Invoke("stopFireworks", 10);
                //} else {
                   GUI.Label(new Rect(25, 75, 300, 100), "You Lose.  Total Score of " + score, endGameLabelStyle);
                //}
                //restart button
                if (GUI.Button(new Rect(1920 - buttonWidth, 0, buttonWidth, maxHeight), restartHudIcon)) {
                    Time.timeScale = 1.0f;
                    isPaused = false;
                    LevelController.reloadCurrentLevel();
                }
                //main menu button
                if (GUI.Button(new Rect(1920 - (buttonWidth*2), 0, buttonWidth, maxHeight), backHudIcon)) {
                    Time.timeScale = 1.0f;
                    PreferencesManager.END_GAME = false;
                    LevelController.loadMainMenuScene();
                }
                return;
            }
            #endregion

            #region pause menu
            if (isPaused) {
                //pause menu buttons
                if (GUI.Button(new Rect(1920 - buttonWidth, 0, buttonWidth, maxHeight), restartHudIcon)) {
                    Time.timeScale = 1.0f;
                    isPaused = false;
                    LevelController.reloadCurrentLevel();
                }
                //main menu button
                if (GUI.Button(new Rect(1920 - (buttonWidth * 2), 0, buttonWidth, maxHeight), backHudIcon)) {
                    Time.timeScale = 1.0f;
                    LevelController.loadMainMenuScene();
                }
                string tipsText = "TIPS:"+Environment.NewLine + "Score 100 points in a level to go to next (currently there are 3 levels)" + Environment.NewLine +
                    "There is a fly/walk button and setting that changes the way you control your character.  When flying is selected you must"+
                    " click an area of the map to move there, where as when walking you use the arrow keys (or awsd) and the space bar for jump (you can double jump too!)."+ Environment.NewLine+
                    "If some abilities dont seem to do much, make sure you upgrade them.  You gain currency as you play";
                GUI.Label(new Rect(500, 0, 900, 900), tipsText, tipsLabelStyle);

            }
            #endregion

            GUI.BeginGroup(guiGroupRect);

            float buttonPadding = 5;
            Rect pauseButtonHudRect = new Rect(0, bottom, buttonWidth, maxHeight);
            left += buttonWidth + buttonPadding;
            Rect healthHudRect = new Rect(left, bottom, labelWidth, maxHeight);
            left += labelWidth + buttonPadding;
            Rect scoreHudRect = new Rect(left, bottom, labelWidth, maxHeight);
            left += labelWidth + buttonPadding;
            Rect shieldButtonHudRect = new Rect(left, bottom, buttonWidth, maxHeight);
            left += buttonWidth + buttonPadding;
            Rect speedButtonHudRect = new Rect(left, bottom, buttonWidth, maxHeight);
            left += buttonWidth + buttonPadding;
            Rect burstButtonHudRect = new Rect(left, bottom, buttonWidth, maxHeight);
            left += buttonWidth + buttonPadding;
            Rect movementButtonHudRect = new Rect(left, bottom, buttonWidth, maxHeight);

            bottom = 0;
            //paused and resume button
            if (GUI.Button(pauseButtonHudRect, isPaused ? resumeHudIcon : pauseHudIcon)) {
                isPaused = false;
                //pause game
                if (Time.timeScale.Equals(1.0f)) {
                    Time.timeScale = 0.0f;
                    isPaused = true;
                } else if (Time.timeScale.Equals(0.0f)) {
                    Time.timeScale = 1.0f;
                } else {
                    Time.timeScale = 1.0f;
                }
            }


            //create and populate hud display values
            if (playerController != null) {
                // Health Hud
                GUI.Box(healthHudRect, new GUIContent(" " + health.ToString(), healthHudIcon), scoreAndHealthStyle);

                // Score Hud
                GUI.Box(scoreHudRect, new GUIContent(" " + score.ToString(), scoreHudIcon), scoreAndHealthStyle);
            }

            //place shield button but only allow it to be pressed in cooldown allows it
            if (Time.time - shieldHudLastPressed > playerController.SHIELD_COOLDOWN || shieldHudLastPressed == 0) {
                //shields up Button (auto deactivates)
                if (GUI.Button(shieldButtonHudRect, shieldHudIcon)) {
                    playerController.activateShield();

                    shieldHudLastPressed = Time.time;
                }
            } else {
                GUI.Button(shieldButtonHudRect, shieldHudIcon);
                GUI.Label(shieldButtonHudRect, Mathf.Round((playerController.SHIELD_COOLDOWN - (Time.time - shieldHudLastPressed))).ToString(), coolDownLabelStyle);
            }


            //place speed boost button but only allow it to be pressed in cooldown allows it
            if (Time.time - speedBoostLastPressed > playerController.SPEED_BOOST_COOLDOWN || speedBoostLastPressed == 0) {
                //boost speed Button (auto deactivates)
                if (GUI.Button(speedButtonHudRect, speedBoostHudIcon)) {
                    playerController.speedBoost();
                    speedBoostLastPressed = Time.time;
                }
            } else {
                GUI.Button(speedButtonHudRect, speedBoostHudIcon);
                GUI.Label(speedButtonHudRect, Mathf.Round((playerController.SPEED_BOOST_COOLDOWN - (Time.time - speedBoostLastPressed))).ToString(), coolDownLabelStyle);
            }


            //place burst button but only allow it to be pressed in cooldown allows it
            if (Time.time - burstLastPressed > playerController.BURST_COOLDOWN || burstLastPressed == 0) {
                //boost speed Button (auto deactivates)
                if (GUI.Button(burstButtonHudRect, burstHudIcon)) {
                    playerController.activateBurst();
                    burstLastPressed = Time.time;
                }
            } else {
                GUI.Button(burstButtonHudRect, burstHudIcon);
                GUI.Label(burstButtonHudRect, Mathf.Round((playerController.BURST_COOLDOWN - (Time.time - burstLastPressed))).ToString(), coolDownLabelStyle);
            }


            if(PreferencesManager.IS_WALKING){
                if (GUI.Button(movementButtonHudRect, flyHudIcon)) {
                    PreferencesManager.setFlyMovement();
                }
            }else{
                if (GUI.Button(movementButtonHudRect, walkHudIcon)) {
                    PreferencesManager.setWalkMovement();                
                }
            }

            GUI.EndGroup();
            //docs.unity3d.com/manual/gui-basics.html
            //GUI.Box (new Rect (0,0,100,50), "Top-left");
            //GUI.Box (new Rect (Screen.width - 100,0,100,50), "Top-right");
            //GUI.Box (new Rect (0,Screen.height - 50,100,50), "Bottom-left");
            //GUI.Box (new Rect (Screen.width - 100,Screen.height - 50,100,50), "Bottom-right");
        }
		public void changePauseState(bool paused){
			this.isPaused = paused;
		}
        public bool onHud(Vector2 point) {
			//Vector3 x = Camera.main.ScreenToWorldPoint (point);
			//Vector3 y = Camera.main.WorldToScreenPoint (point);
			//Vector3 z = Camera.main.ScreenToViewportPoint (point);
            if (guiGroupRect.Contains(point)) {
                return true;
            } else{
                return false;
            }
        }
        public void moveFireworks() {
            foreach (ParticleEmitter pe in instantiatedFireworkParticleSystem) {
                pe.transform.position = SpawnPoint.getSpawnPointAtRandomInsideBoundsExcludeHud();
            }
        }
        public void stopFireworks() {
            foreach (ParticleEmitter pe in instantiatedFireworkParticleSystem) {
                pe.emit = false;
            }
        }
	}
}

