//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;
using UnityEngine.SocialPlatforms;

namespace TikiBeeGame {
    public class SocialController : MonoBehaviour {
        
        PlayerController playerController = null;

        IAchievement scoreAchievement = null;
        ILeaderboard leaderboard = null;

        public SocialController() {
        }

        void Update() {
            if (playerController == null) {
                GameObject playerGO = GameObject.FindGameObjectWithTag("Player");
                if (playerGO != null) {
                    if (PreferencesManager.TIKIBEE_SELECTED) {
                        playerController = (PlayerController)playerGO.GetComponent<TikiBeeController>();
                    } else if (PreferencesManager.BOMBUS_SELECTED) {
                        playerController = (PlayerController)playerGO.GetComponent<BombusController>();
                    }
                }
            }
        }

        void Start() {


            // Authenticate and register a ProcessAuthentication callback
            // This call needs to be made before we can proceed to other calls in the Social API
            Social.localUser.Authenticate(ProcessAuthentication);


            //IAchievement achievements[] = IAchievement[1];

            //scoreAchievement = Social.CreateAchievement();
            //scoreAchievement.id = "ScoreAchievement";
            //scoreAchievement.percentCompleted = playerController.SCORE;

            //Social.LoadAchievements(achievements => {
            //    if (achievements.Length > 0) {
            //        Debug.Log("Got " + achievements.Length + " achievement instances");
            //        string myAchievements = "My achievements:\n";
            //        foreach (IAchievement achievement in achievements) {
            //            myAchievements += "\t" +
            //                achievement.id + " " +
            //                achievement.percentCompleted + " " +
            //                achievement.completed + " " +
            //                achievement.lastReportedDate + "\n";
            //        }
            //        Debug.Log(myAchievements);
            //    } else
            //        Debug.Log("No achievements returned");
            //});

			
            //scoreAchievement.ReportProgress(result => {
            //    if (playerController.SCORE > 100)
            //        Debug.Log("Successfully reported progress");
            //    else
            //        Debug.Log("Failed to report progress");
            //});
        }

        private void createAchievements() {

            IAchievement achievement = Social.CreateAchievement();
            achievement.id = "Achievement01";
            achievement.percentCompleted = 100;
            achievement.ReportProgress(result => {
                if (playerController.SCORE > 100)
                    Debug.Log("Successfully reported progress");
                else
                    Debug.Log("Failed to report progress");
            });
        }

        private void createLeaderboards() {

            leaderboard = Social.CreateLeaderboard();
            leaderboard.id = "MainLeaderboard";
            leaderboard.LoadScores(result => {
                Debug.Log("Received " + leaderboard.scores.Length + " scores");
                foreach (IScore score in leaderboard.scores)
                    Debug.Log(score);
            });
        }

        // This function gets called when Authenticate completes
        // Note that if the operation is successful, Social.localUser will contain data from the server. 
        void ProcessAuthentication(bool success) {
            if (success) {
                Logger.logSocial("Authenticated, checking achievements");

                // Request loaded achievements, and register a callback for processing them
                Social.LoadAchievements(ProcessLoadedAchievements);
            } else
                Logger.logSocial("Failed to authenticate");
        }

        // This function gets called when the LoadAchievement call completes
        void ProcessLoadedAchievements(IAchievement[] achievements) {
            if (achievements.Length == 0)
                Logger.logSocial("Error: no achievements found");
            else
                Logger.logSocial("Got " + achievements.Length + " achievements");

            // You can also call into the functions like this
            Social.ReportProgress("Achievement01", 100.0, result => {
                if (result)
                    Logger.logSocial("Successfully reported achievement progress");
                else
                    Logger.logSocial("Failed to report achievement");
            });
        }
    }
}

